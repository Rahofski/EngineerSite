import { Button, Card, Input, Stack, Center, Box, IconButton } from "@chakra-ui/react";
import { Field } from "../components/ui/field";
import { useState } from "react";
import { InputGroup } from "./ui/input-group";
import { useNavigate } from "react-router-dom";
import { jwtDecode } from "jwt-decode"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º jwtDecode
import { BASE_URL } from "@/App";

export const CardWithForm = () => {
  const [show, setShow] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è useNavigate

  const handleClear = () => {
    setEmail(""); // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–ø—É—Ç–∞
    setPassword(""); // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–ø—É—Ç–∞
  };
  const handleLogin = async () => {
    try {
      const response = await fetch(BASE_URL + "/user/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email,
          password,
        }),
      });
  
      const status = response.status;
      console.log("HTTP Status Code:", status);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Something went wrong");
      }
  
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
      const data = await response.json();
      console.log(data);
      const token = data.token;

      if (!token) {
        throw new Error("No token received");
      }
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
      localStorage.setItem("token", token);
  
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const decodedToken = jwtDecode<{ field_id?: number }>(token);
  
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const redirectPath = (decodedToken.field_id === 4) ? "/AdminPage" : "/request";
  
      // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
      setEmail("");
      setPassword("");
  
      console.log("Login succeeded, redirecting to", redirectPath);
  
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      setTimeout(() => {
        navigate(redirectPath);
      }, 1000);
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:", error);
  
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ "/request" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      setTimeout(() => {
        navigate("/AdminPage");
      }, 1000);
    }
  };

  return (
    <Center height="100vh">
      <Card.Root
        w="md"
        maxW="md"
        colorPalette={"green"}
        justifyContent={"center"}
        border="15px solid"
        borderColor="gray.300"
        borderRadius="lg"
        boxShadow="md"
        p={4}
        color={"#F1F5F9"}
        bg="linear-gradient(to bottom, #34D399, #064E3B)" // –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω–æ–≥–æ –¥–æ –∑–µ–ª–µ–Ω–æ–≥–æ
      >
        <Card.Header>
          <Card.Title fontSize={"24px"} color = {"white"}>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</Card.Title>
          <Card.Description color={"white"}>
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏
          </Card.Description>
        </Card.Header>
        <Card.Body>
          <Stack gap="4" w="full">
            <Field label="–ü–æ—á—Ç–∞">
              <Input
                type="email"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É"
                _placeholder={{ color: "lightgrey" }}
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </Field>
            <Field label="–ü–∞—Ä–æ–ª—å">
              <InputGroup>
                <>
                  <Input
                    type={show ? "text" : "password"} // –ú–µ–Ω—è–µ—Ç —Ç–∏–ø –Ω–∞ "text", –∫–æ–≥–¥–∞ show == true
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    value={password}
                    _placeholder={{ color: "lightgrey" }}
                    onChange={(e) => setPassword(e.target.value)}
                    w="250px"
                    pr="3rem" // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                  />
                  <Box position="absolute" right="0" top="50%" transform="translateY(-50%)">
                    <IconButton
                      aria-label={show ? "Hide password" : "Show password"}
                      size="sm"
                      onClick={() => setShow(!show)}
                      variant="ghost"
                      _hover={{ bg: "transparent" }} // –£–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                      _active={{ bg: "transparent" }} // –£–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ
                      _focus={{ boxShadow: "none" }} // –£–±–∏—Ä–∞–µ—Ç —Ñ–æ–∫—É—Å–Ω—É—é —Ä–∞–º–∫—É
                    >
                      {show ? "üö´" : "üëÅÔ∏è"} {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–º–µ—Å—Ç–æ –∏–∫–æ–Ω–æ–∫ */}
                    </IconButton> 
                  </Box>
                  </>
                  </InputGroup>
            </Field>
          </Stack>
        </Card.Body>
        <Card.Footer justifyContent="space-between">
          <Button variant="solid" onClick={handleClear}>–°–±—Ä–æ—Å–∏—Ç—å</Button>
          <Button variant="solid" onClick={handleLogin}>–í–æ–π—Ç–∏</Button>
        </Card.Footer>
      </Card.Root>
    </Center>
  );
};